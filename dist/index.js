define("editorjs-linktune",[],(()=>(()=>{"use strict";var e={};return{607:function(e,t){var i=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function s(e){try{l(a.next(e))}catch(e){r(e)}}function c(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkTune=void 0;class a{constructor({data:e,config:t}){e||(e=""),this.data=e,this.searchEndpointUrl=t.endpoint,this.searchQueryParam=t.queryParam,this.searchResults=[],this.searchResultWrap=this.createElm("div",["ce-link-autocomplete__items"]),this.linkField=window.document.createElement("input"),this.linkField.classList.add("ce-link-autocomplete__field-input"),this.linkField.setAttribute("type","text"),this.linkField.setAttribute("placeholder","Link")}static get isTune(){return!0}wrap(e){var t;return e.style.border="",e.style.paddingLeft="",null===(t=e.querySelector(".styled-blocks-label"))||void 0===t||t.remove(),this.data&&(e.style.border="1px solid red"),this.blockContent=e,e}save(){return this.data}clearSearchList(){for(;this.searchResultWrap.firstChild;)this.searchResultWrap.removeChild(this.searchResultWrap.firstChild)}static get CSS(){return{iconWrapper:"ce-link-autocomplete__icon-wrapper",hidden:"ce-link-autocomplete__hidden",actionsWrapper:"ce-link-autocomplete__actions-wrapper",field:"ce-link-autocomplete__field",fieldLoading:"ce-link-autocomplete__field--loading",fieldInput:"ce-link-autocomplete__field-input",foundItems:"ce-link-autocomplete__items",searchItem:"ce-link-autocomplete__search-item",searchItemSelected:"ce-link-autocomplete__search-item--selected",searchItemName:"ce-link-autocomplete__search-item-name",searchItemDescription:"ce-link-autocomplete__search-item-description",linkDataWrapper:"ce-link-autocomplete__link-data-wrapper",linkDataTitleWrapper:"ce-link-autocomplete__link-data-title-wrapper",linkDataName:"ce-link-autocomplete__link-data-name",linkDataDescription:"ce-link-autocomplete__link-data-description",linkDataURL:"ce-link-autocomplete__link-data-url"}}generateSearchList(e=[]){this.clearSearchList(),0!==e.length&&e.forEach((e=>{const t=this.createElm("div",[a.CSS.searchItem]),i=this.createElm("div",[a.CSS.searchItemName],{innerText:e.name||e.href});if(t.appendChild(i),e.description){const i=this.createElm("div",[a.CSS.searchItemDescription],{innerText:e.description});t.appendChild(i)}t.dataset.name=e.name,t.dataset.href=e.href,t.dataset.description=e.description,t.addEventListener("click",(e=>{this.linkField.value=t.dataset.href+"",this.data=this.linkField.value,this.wrap(this.blockContent)})),this.searchResultWrap.appendChild(t)}))}createElm(e,t,i){const a=window.document.createElement(e);t.forEach((e=>a.classList.add(e)));for(const e in i)"innerText"!==e?a.setAttribute(e,i[e]):a.innerText=i[e];return a}addLinkField(){const e=this.createElm("div",["ce-popover__item"]),t=this.createElm("div",["ce-popover__item-icon"]);t.innerHTML="L";const i=this.createElm("div",["ce-popover__item-label"]),a=this.linkField;return this.linkField.setAttribute("value",this.data),this.linkField.addEventListener("keyup",(()=>{this.searchRequest(a.value).then((e=>{this.generateSearchList(e)}))})),i.appendChild(a),e.appendChild(i),e.appendChild(t),t.addEventListener("click",(()=>{this.data=a.value,this.wrap(this.blockContent)})),e}render(){const e=window.document.createElement("div"),t=this.addLinkField();return e.appendChild(t),e.appendChild(this.searchResultWrap),e}searchRequest(e){return i(this,void 0,void 0,(function*(){const t=new URLSearchParams({[this.searchQueryParam]:e}).toString();try{const e=yield fetch(`${this.searchEndpointUrl}?${t}`),i=yield e.json();if(i&&i.success)return i.items;console.warn('Link Autocomplete: invalid response format: "success: true" expected, but got %o. Response: %o',i.success,i)}catch(e){}return[]}))}}t.LinkTune=a}}[607](0,e),e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,